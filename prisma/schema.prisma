// Optimized Hotel Management & CMS Schema for Tropicana Worldwide Corporation
// Designed for scalability across multiple business units/properties

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =============================================================================
// CORE ENUMS
// =============================================================================

// User & Access Management
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_ACTIVATION
}

enum PermissionScope {
  GLOBAL
  BUSINESS_UNIT
  DEPARTMENT
}

// Property & Room Management
enum PropertyType {
  HOTEL
  RESORT
  VILLA_COMPLEX
  APARTMENT_HOTEL
  BOUTIQUE_HOTEL
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
  VILLA
  PENTHOUSE
  FAMILY
  ACCESSIBLE
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  OUT_OF_ORDER
  MAINTENANCE
  CLEANING
  RESERVED
  BLOCKED
}

enum HousekeepingStatus {
  CLEAN
  DIRTY
  INSPECTED
  OUT_OF_ORDER
  MAINTENANCE_REQUIRED
  IN_PROGRESS
}

// Booking & Reservation Management
enum ReservationStatus {
  INQUIRY
  PROVISIONAL
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
  WALKED_IN
}

enum ReservationSource {
  DIRECT
  WALK_IN
  PHONE
  EMAIL
  WEBSITE
  OTA_BOOKING
  OTA_EXPEDIA
  OTA_AGODA
  TRAVEL_AGENT
  CORPORATE
  GROUP_BOOKING
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
  CANCELLED
  FAILED
  DISPUTED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  GCASH
  PAYMAYA
  GRABPAY
  PAYMONGO
  CREDIT_CARD
}

// Service & Operations
enum ServiceCategory {
  HOUSEKEEPING
  MAINTENANCE
  CONCIERGE
  ROOM_SERVICE
  SPA
  LAUNDRY
  TRANSPORTATION
  SPECIAL_REQUEST
}

enum ServiceStatus {
  REQUESTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

// Content Management
enum ContentType {
  TEXT
  HTML
  MARKDOWN
  IMAGE
  VIDEO
  JSON
  FILE
}

enum PublishStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

// =============================================================================
// CORE SYSTEM MODELS
// =============================================================================

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  username         String?    @unique
  passwordHash     String
  firstName        String
  lastName         String
  phone            String?
  avatar           String?
  status           UserStatus @default(PENDING_ACTIVATION)
  emailVerifiedAt  DateTime?
  lastLoginAt      DateTime?
  timezone         String     @default("Asia/Manila")
  locale           String     @default("en")
  twoFactorEnabled Boolean    @default(false)
  twoFactorSecret  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  // Relationships
  assignments   UserBusinessUnitRole[]
  permissions   UserPermission[]
  createdByUser User?                  @relation("UserCreatedBy", fields: [createdBy], references: [id])
  usersCreated  User[]                 @relation("UserCreatedBy")
  sessions      UserSession[]
  auditLogs     AuditLog[]

  // Hotel Operations
  assignedTasks     Task[]             @relation("TaskAssignee")
  createdTasks      Task[]             @relation("TaskCreator")
  serviceRequests   ServiceRequest[]   @relation("ServiceRequestHandler")
  guestInteractions GuestInteraction[]

  // Content Management
  createdContent ContentItem[]

  notifications Notification[] @relation("UserNotifications")

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  displayName String
  description String?
  isSystem    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  assignments UserBusinessUnitRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String          @id @default(uuid())
  name        String          @unique
  displayName String
  description String?
  scope       PermissionScope @default(BUSINESS_UNIT)
  module      String // e.g., "reservations", "housekeeping", "content"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@index([module, scope])
  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  userId       String
  permissionId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  createdBy String?

  @@id([userId, permissionId])
  @@map("user_permissions")
}

model BusinessUnit {
  id           String       @id @default(uuid())
  name         String
  displayName  String
  description  String?
  propertyType PropertyType

  // Location & Contact
  address    String?
  city       String
  state      String?
  country    String  @default("Philippines")
  postalCode String?
  phone      String?
  email      String?
  website    String?

  // Business Settings
  primaryCurrency   String   @default("PHP")
  secondaryCurrency String?
  timezone          String   @default("Asia/Manila")
  locale            String   @default("en")
  taxRate           Decimal? @db.Decimal(5, 4)
  serviceFeeRate    Decimal? @db.Decimal(5, 4)

  // Branding & Media
  logo           String?
  primaryColor   String?
  secondaryColor String?

  // Operational Settings
  checkInTime       String @default("15:00")
  checkOutTime      String @default("12:00")
  cancellationHours Int    @default(24)
  maxAdvanceBooking Int    @default(365) // days

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  // Relationships
  userAssignments UserBusinessUnitRole[]
  roomTypes       RoomType_Model[]       @relation("BusinessUnitRoomTypes")
  rooms           Room[]
  reservations    Reservation[]
  guests          Guest[]
  services        Service[]
  amenities       Amenity[]
  departments     Department[]

  // Content Management
  contentItems ContentItem[]
  mediaLibrary MediaItem[]
  pages        Page[]

  websiteConfig  WebsiteConfiguration? @relation("WebsiteConfig")
  heroSlides     HeroSlide[]           @relation("HeroSlides")
  testimonials   Testimonial[]         @relation("BusinessUnitTestimonials")
  faqs           FAQ[]                 @relation("BusinessUnitFAQs")
  contactForms   ContactForm[]         @relation("ContactForms")
  newsletterSubs Newsletter[]          @relation("NewsletterSubscriptions")

  specialOffers SpecialOffer[] @relation("BusinessUnitOffers")
  restaurants   Restaurant[]   @relation("BusinessUnitRestaurants")
  events        Event[]        @relation("BusinessUnitEvents")

  @@index([isActive, propertyType])
  @@index([city, country])
  @@map("business_units")
}

model UserBusinessUnitRole {
  userId         String
  businessUnitId String
  roleId         String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id])

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, businessUnitId, roleId])
  @@map("user_business_unit_roles")
}

model Department {
  id             String  @id @default(uuid())
  businessUnitId String
  name           String
  description    String?
  managerId      String?
  isActive       Boolean @default(true)

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  services Service[]
  tasks    Task[]

  @@unique([businessUnitId, name])
  @@map("departments")
}

// =============================================================================
// HOTEL OPERATIONS MODELS
// =============================================================================

model RoomType_Model {
  id             String   @id @default(uuid())
  businessUnitId String
  name           String
  displayName    String
  description    String?
  type           RoomType

  // Capacity & Features
  maxOccupancy     Int      @default(2)
  maxAdults        Int      @default(2)
  maxChildren      Int      @default(0)
  maxInfants       Int      @default(0)
  bedConfiguration String? // "1 King", "2 Queens", etc.
  roomSize         Decimal? @db.Decimal(8, 2) // in sqm

  // Amenities & Features
  hasBalcony     Boolean @default(false)
  hasOceanView   Boolean @default(false)
  hasPoolView    Boolean @default(false)
  hasKitchenette Boolean @default(false)
  hasLivingArea  Boolean @default(false)
  smokingAllowed Boolean @default(false)
  petFriendly    Boolean @default(false)
  isAccessible   Boolean @default(false)

  // Pricing
  baseRate        Decimal  @db.Decimal(10, 2)
  extraPersonRate Decimal? @db.Decimal(10, 2)
  extraChildRate  Decimal? @db.Decimal(10, 2)

  // Media
  primaryImage String?
  images       String[]
  floorPlan    String?

  isActive  Boolean @default(true)
  sortOrder Int     @default(0)

  businessUnit     BusinessUnit      @relation("BusinessUnitRoomTypes", fields: [businessUnitId], references: [id])
  reservationRooms ReservationRoom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rooms     Room[]
  rates     RoomRate[]
  amenities RoomTypeAmenity[]

  offers OfferRoomType[] @relation("RoomTypeOffers")

  @@unique([businessUnitId, name])
  @@index([businessUnitId, type])
  @@index([isActive, sortOrder])
  @@map("room_types")
}

model Room {
  id             String  @id @default(uuid())
  businessUnitId String
  roomTypeId     String
  roomNumber     String
  floor          Int?
  wing           String?

  status       RoomStatus         @default(AVAILABLE)
  housekeeping HousekeepingStatus @default(CLEAN)

  // Maintenance & Cleaning
  lastCleaned     DateTime?
  lastInspected   DateTime?
  lastMaintenance DateTime?
  outOfOrderUntil DateTime?

  // Notes & Special Features
  notes           String?
  specialFeatures String[] // Override features from room type

  isActive Boolean @default(true)

  businessUnit BusinessUnit   @relation(fields: [businessUnitId], references: [id])
  roomType     RoomType_Model @relation(fields: [roomTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  reservations    ReservationRoom[]
  tasks           Task[]
  serviceRequests ServiceRequest[]
  maintenanceLogs MaintenanceLog[]

  @@unique([businessUnitId, roomNumber])
  @@index([businessUnitId, status])
  @@index([roomTypeId, status])
  @@index([floor, wing])
  @@map("rooms")
}

model Guest {
  id             String @id @default(uuid())
  businessUnitId String

  // Personal Information
  title       String? // Mr, Mrs, Ms, Dr, etc.
  firstName   String
  lastName    String
  email       String
  phone       String?
  dateOfBirth DateTime?
  nationality String?

  // Identification
  passportNumber String?
  idNumber       String?
  idType         String? // "Passport", "National ID", "Driver's License"

  // Address
  address    String?
  city       String?
  state      String?
  country    String?
  postalCode String?

  // Guest Profile
  vipStatus     Boolean @default(false)
  loyaltyNumber String?
  preferences   Json? // Dietary, room preferences, etc.
  notes         String?

  // Marketing
  marketingOptIn Boolean @default(false)
  source         String? // How they heard about us

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  reservations    Reservation[]
  interactions    GuestInteraction[]
  stays           Stay[]
  serviceRequests ServiceRequest[] // Added this line**

  restaurantReservations RestaurantReservation[] @relation("GuestRestaurantReservations")
  eventBookings          EventBooking[]          @relation("GuestEventBookings")

  @@unique([businessUnitId, email])
  @@index([businessUnitId, lastName])
  @@index([loyaltyNumber])
  @@map("guests")
}

model Reservation {
  id             String @id @default(uuid())
  businessUnitId String
  guestId        String

  // Reservation Details
  confirmationNumber String            @unique
  source             ReservationSource @default(DIRECT)
  status             ReservationStatus @default(CONFIRMED)

  // Dates & Occupancy
  checkInDate  DateTime
  checkOutDate DateTime
  checkInTime  String?
  checkOutTime String?
  nights       Int

  adults   Int @default(1)
  children Int @default(0)
  infants  Int @default(0)

  // Pricing
  subtotal    Decimal @db.Decimal(10, 2)
  taxes       Decimal @default(0) @db.Decimal(10, 2)
  serviceFee  Decimal @default(0) @db.Decimal(10, 2)
  discounts   Decimal @default(0) @db.Decimal(10, 2)
  totalAmount Decimal @db.Decimal(10, 2)
  currency    String  @default("PHP")

  // Payment
  paymentStatus   PaymentStatus @default(PENDING)
  paymentDue      DateTime?
  depositRequired Decimal?      @db.Decimal(10, 2)
  depositPaid     Decimal       @default(0) @db.Decimal(10, 2)

  // Guest Requests & Notes
  specialRequests String?
  guestNotes      String?
  internalNotes   String?

  // Booking Details
  bookedAt DateTime @default(now())
  bookedBy String?

  // Cancellation
  cancelledAt        DateTime?
  cancellationReason String?
  refundAmount       Decimal?  @db.Decimal(10, 2)

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])
  guest        Guest        @relation(fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rooms        ReservationRoom[]
  payments     Payment[]
  stay         Stay?
  interactions GuestInteraction[]

  offerBookings OfferBooking[] @relation("OfferReservations")

  @@index([businessUnitId, checkInDate])
  @@index([status, checkInDate])
  @@index([confirmationNumber])
  @@index([guestId])
  @@map("reservations")
}

model ReservationRoom {
  id            String  @id @default(uuid())
  reservationId String
  roomId        String?
  roomTypeId    String

  rate     Decimal @db.Decimal(10, 2)
  nights   Int
  subtotal Decimal @db.Decimal(10, 2)

  // Room assignment (can be null until check-in)
  assignedAt DateTime?

  reservation Reservation    @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  room        Room?          @relation(fields: [roomId], references: [id])
  roomType    RoomType_Model @relation(fields: [roomTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reservationId])
  @@index([roomId])
  @@map("reservation_rooms")
}

model Stay {
  id            String @id @default(uuid())
  reservationId String @unique
  guestId       String

  actualCheckIn  DateTime?
  actualCheckOut DateTime?

  // Room Key Management
  keyCardsIssued   Int      @default(0)
  keyCardNumbers   String[]
  keyCardsReturned Boolean  @default(false)

  // Charges & Billing
  roomCharges  Decimal @default(0) @db.Decimal(10, 2)
  extraCharges Decimal @default(0) @db.Decimal(10, 2)
  totalCharges Decimal @default(0) @db.Decimal(10, 2)

  // Housekeeping
  housekeepingOptOut Boolean @default(false)

  notes String?

  reservation Reservation @relation(fields: [reservationId], references: [id])
  guest       Guest       @relation(fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  charges      Charge[]
  folios       Folio[]
  interactions GuestInteraction[]

  @@index([guestId])
  @@index([actualCheckIn, actualCheckOut])
  @@map("stays")
}

// =============================================================================
// SERVICE & OPERATIONS MODELS
// =============================================================================

model Service {
  id             String  @id @default(uuid())
  businessUnitId String
  departmentId   String?

  name        String
  description String?
  category    ServiceCategory

  // Pricing & Timing
  basePrice        Decimal @db.Decimal(10, 2)
  duration         Int? // in minutes
  isChargeable     Boolean @default(true)
  requiresApproval Boolean @default(false)

  // Availability
  isActive       Boolean @default(true)
  availableHours Json? // Operating hours
  advanceNotice  Int? // minutes required

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])
  department   Department?  @relation(fields: [departmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  requests ServiceRequest[]

  @@unique([businessUnitId, name])
  @@index([businessUnitId, category])
  @@map("services")
}

model ServiceRequest {
  id        String  @id @default(uuid())
  serviceId String?
  roomId    String?
  guestId   String?

  title       String
  description String
  category    ServiceCategory
  priority    TaskPriority    @default(NORMAL)
  status      ServiceStatus   @default(REQUESTED)

  // Assignment
  assignedTo String?
  assignedAt DateTime?

  // Timing
  requestedAt DateTime  @default(now())
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?

  // Costs
  estimatedCost Decimal? @db.Decimal(10, 2)
  actualCost    Decimal? @db.Decimal(10, 2)

  // Notes
  guestNotes String?
  staffNotes String?

  service      Service? @relation(fields: [serviceId], references: [id])
  room         Room?    @relation(fields: [roomId], references: [id])
  guest        Guest?   @relation(fields: [guestId], references: [id])
  assignedUser User?    @relation("ServiceRequestHandler", fields: [assignedTo], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, priority])
  @@index([assignedTo, scheduledAt])
  @@index([roomId])
  @@map("service_requests")
}

model Task {
  id           String  @id @default(uuid())
  departmentId String?
  roomId       String?

  title       String
  description String?
  category    ServiceCategory
  priority    TaskPriority    @default(NORMAL)
  status      ServiceStatus   @default(REQUESTED)

  // Assignment
  assignedTo String?
  createdBy  String

  // Timing
  scheduledAt       DateTime?
  estimatedDuration Int? // minutes
  actualDuration    Int? // minutes
  startedAt         DateTime?
  completedAt       DateTime?
  dueAt             DateTime?

  // Checklist
  checklist Json? // Array of checklist items

  notes String?

  department   Department? @relation(fields: [departmentId], references: [id])
  room         Room?       @relation(fields: [roomId], references: [id])
  assignedUser User?       @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator      User        @relation("TaskCreator", fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, priority])
  @@index([assignedTo, scheduledAt])
  @@index([departmentId])
  @@map("tasks")
}

// =============================================================================
// FINANCIAL MODELS
// =============================================================================

model RoomRate {
  id          String  @id @default(uuid())
  roomTypeId  String
  name        String
  description String?

  // Rate Details
  baseRate Decimal @db.Decimal(10, 2)
  currency String  @default("PHP")

  // Validity
  validFrom DateTime
  validTo   DateTime

  // Day of Week Availability
  monday    Boolean @default(true)
  tuesday   Boolean @default(true)
  wednesday Boolean @default(true)
  thursday  Boolean @default(true)
  friday    Boolean @default(true)
  saturday  Boolean @default(true)
  sunday    Boolean @default(true)

  // Booking Restrictions
  minStay    Int  @default(1)
  maxStay    Int?
  minAdvance Int? // days
  maxAdvance Int? // days

  // Pricing Variants
  extraPersonRate Decimal? @db.Decimal(10, 2)
  childRate       Decimal? @db.Decimal(10, 2)

  isActive Boolean @default(true)
  priority Int     @default(0)

  roomType RoomType_Model @relation(fields: [roomTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomTypeId, validFrom, validTo])
  @@index([isActive, priority])
  @@map("room_rates")
}

model Payment {
  id            String @id @default(uuid())
  reservationId String

  amount   Decimal       @db.Decimal(10, 2)
  currency String        @default("PHP")
  method   PaymentMethod
  status   PaymentStatus @default(PENDING)

  // Payment Provider Details
  providerRef      String? // PayMongo payment ID, etc.
  providerResponse Json?

  // Transaction Details
  transactionDate DateTime  @default(now())
  processedAt     DateTime?

  notes String?

  reservation Reservation @relation(fields: [reservationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reservationId])
  @@index([status, transactionDate])
  @@map("payments")
}

model Charge {
  id     String @id @default(uuid())
  stayId String

  description String
  amount      Decimal @db.Decimal(10, 2)
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Decimal(10, 2)

  department String?
  reference  String? // Order/receipt number

  chargedAt DateTime  @default(now())
  posted    Boolean   @default(false)
  postedAt  DateTime?

  stay Stay @relation(fields: [stayId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stayId, chargedAt])
  @@map("charges")
}

model Folio {
  id     String @id @default(uuid())
  stayId String

  number    String  @unique
  balance   Decimal @db.Decimal(10, 2)
  isPrimary Boolean @default(true)

  stay Stay @relation(fields: [stayId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stayId])
  @@map("folios")
}

// =============================================================================
// GUEST EXPERIENCE MODELS
// =============================================================================

model GuestInteraction {
  id            String  @id @default(uuid())
  guestId       String
  reservationId String?
  stayId        String?
  userId        String

  type        String // "Check-in", "Complaint", "Compliment", "Request"
  subject     String
  description String

  // Follow-up
  requiresFollowUp Boolean   @default(false)
  followUpDate     DateTime?
  resolved         Boolean   @default(false)
  resolution       String?

  guest       Guest        @relation(fields: [guestId], references: [id])
  reservation Reservation? @relation(fields: [reservationId], references: [id])
  stay        Stay?        @relation(fields: [stayId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guestId, createdAt])
  @@index([requiresFollowUp, followUpDate])
  @@map("guest_interactions")
}

model Amenity {
  id             String @id @default(uuid())
  businessUnitId String

  name        String
  description String?
  category    String? // "Room", "Property", "Wellness", "Business"
  icon        String?

  isActive     Boolean  @default(true)
  isChargeable Boolean  @default(false)
  chargeAmount Decimal? @db.Decimal(10, 2)

  sortOrder Int @default(0)

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  roomTypes RoomTypeAmenity[]

  @@unique([businessUnitId, name])
  @@index([businessUnitId, category])
  @@map("amenities")
}

model RoomTypeAmenity {
  roomTypeId String
  amenityId  String

  roomType RoomType_Model @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  amenity  Amenity        @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([roomTypeId, amenityId])
  @@map("room_type_amenities")
}

// =============================================================================
// MAINTENANCE MODELS
// =============================================================================

model MaintenanceLog {
  id     String @id @default(uuid())
  roomId String

  type        String // "Preventive", "Corrective", "Emergency"
  title       String
  description String
  priority    TaskPriority @default(NORMAL)

  // Timing
  reportedAt  DateTime  @default(now())
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?

  // Details
  contractor String? // External contractor
  cost       Decimal? @db.Decimal(10, 2)

  notes String?

  room Room @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId, reportedAt])
  @@map("maintenance_logs")
}

// =============================================================================
// CONTENT MANAGEMENT SYSTEM
// =============================================================================

model Page {
  id             String @id @default(uuid())
  businessUnitId String

  title       String
  slug        String
  description String?
  content     String?
  contentType ContentType @default(HTML)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  // Publishing
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?

  // Template
  template String? // Template to use for rendering

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessUnitId, slug])
  @@index([businessUnitId, status])
  @@map("pages")
}

model ContentItem {
  id             String @id @default(uuid())
  businessUnitId String

  // Content Identification
  key         String // "hero.title", "about.description", etc.
  section     String // "hero", "about", "footer"
  name        String // Human-readable name
  description String?

  // Content Data
  content     String
  contentType ContentType @default(TEXT)

  // Localization
  locale String @default("en")

  // Publishing
  status      PublishStatus @default(PUBLISHED)
  publishedAt DateTime?

  // Versioning
  version  Int     @default(1)
  parentId String? // For versioning

  businessUnit BusinessUnit  @relation(fields: [businessUnitId], references: [id])
  parent       ContentItem?  @relation("ContentVersions", fields: [parentId], references: [id])
  versions     ContentItem[] @relation("ContentVersions")
  createdBy    User          @relation(fields: [createdById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  @@unique([businessUnitId, key, locale])
  @@index([businessUnitId, section])
  @@index([status])
  @@map("content_items")
}

model MediaItem {
  id             String @id @default(uuid())
  businessUnitId String

  filename     String
  originalName String
  mimeType     String
  size         Int // in bytes

  // Storage
  url          String
  thumbnailUrl String?

  // Metadata
  title       String?
  description String?
  altText     String?
  tags        String[]

  // Organization
  category String? // "rooms", "amenities", "gallery", etc.
  folder   String?

  // Usage tracking
  usageCount Int       @default(0)
  lastUsedAt DateTime?

  isActive Boolean @default(true)

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessUnitId, category])
  @@index([tags])
  @@map("media_items")
}

// =============================================================================
// SYSTEM MODELS
// =============================================================================

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

model AuditLog {
  id        String  @id @default(uuid())
  userId    String?
  action    String // "CREATE", "UPDATE", "DELETE", "LOGIN", etc.
  entity    String // "Reservation", "Guest", "Room", etc.
  entityId  String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([entity, entityId])
  @@index([action, createdAt])
  @@map("audit_logs")
}

model SystemSetting {
  id    String @id @default(uuid())
  key   String @unique
  value String
  type  String @default("string") // "string", "number", "boolean", "json"

  description String?
  category    String? // "general", "booking", "payment", etc.
  isPublic    Boolean @default(false) // Can be accessed by frontend

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@map("system_settings")
}

model Notification {
  id      String  @id @default(uuid())
  userId  String?
  type    String // "reservation", "maintenance", "guest_request", etc.
  title   String
  message String
  data    Json? // Additional notification data

  isRead Boolean   @default(false)
  readAt DateTime?

  user User? @relation("UserNotifications", fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([userId, isRead])
  @@index([type, createdAt])
  @@map("notifications")
}

// =============================================================================
// WEBSITE SPECIFIC MODELS (Public-facing content)
// =============================================================================

model WebsiteConfiguration {
  id             String @id @default(uuid())
  businessUnitId String @unique

  // Site Identity
  siteName    String
  tagline     String?
  description String?

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  // Social Media
  facebookUrl  String?
  instagramUrl String?
  twitterUrl   String?
  youtubeUrl   String?

  // Contact
  primaryPhone String?
  primaryEmail String?
  bookingEmail String?

  // Booking Settings
  enableOnlineBooking Boolean @default(true)
  bookingNotice       Int     @default(24) // hours
  maxBookingDays      Int     @default(365)

  // Features
  enableReviews    Boolean @default(true)
  enableNewsletter Boolean @default(true)
  enableLiveChat   Boolean @default(false)

  businessUnit BusinessUnit @relation("WebsiteConfig", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("website_configurations")
}

model HeroSlide {
  id             String @id @default(uuid())
  businessUnitId String

  title       String
  subtitle    String?
  description String?

  backgroundImage String
  backgroundVideo String?

  // Call to Action
  ctaText  String?
  ctaUrl   String?
  ctaStyle String  @default("primary") // "primary", "secondary", "outline"

  // Display Settings
  textPosition   String  @default("center") // "left", "center", "right"
  textColor      String  @default("white")
  overlayOpacity Decimal @default(0.3) @db.Decimal(3, 2)

  isActive  Boolean @default(true)
  sortOrder Int     @default(0)

  businessUnit BusinessUnit @relation("HeroSlides", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessUnitId, isActive, sortOrder])
  @@map("hero_slides")
}

model Testimonial {
  id             String @id @default(uuid())
  businessUnitId String

  guestName  String
  guestTitle String? // "Honeymooner", "Business Traveler"
  guestImage String?

  content String
  rating  Int?   @db.SmallInt // 1-5 stars

  // Source
  source    String? // "TripAdvisor", "Booking.com", "Direct"
  sourceUrl String?

  // Display Settings
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)
  sortOrder  Int     @default(0)

  // Dates
  stayDate   DateTime?
  reviewDate DateTime?

  businessUnit BusinessUnit @relation("BusinessUnitTestimonials", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessUnitId, isActive, isFeatured])
  @@map("testimonials")
}

model FAQ {
  id             String @id @default(uuid())
  businessUnitId String

  question String
  answer   String
  category String @default("General")

  isActive  Boolean @default(true)
  sortOrder Int     @default(0)

  // Usage tracking
  viewCount  Int       @default(0)
  lastViewed DateTime?

  businessUnit BusinessUnit @relation("BusinessUnitFAQs", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessUnitId, category, isActive])
  @@map("faqs")
}

model ContactForm {
  id             String  @id @default(uuid())
  businessUnitId String?

  name    String
  email   String
  phone   String?
  subject String?
  message String

  // Classification
  category String? // "General", "Booking", "Complaint", "Compliment"
  priority String  @default("normal") // "low", "normal", "high"

  // Processing
  status      String    @default("new") // "new", "in_progress", "resolved", "closed"
  assignedTo  String?
  response    String?
  respondedAt DateTime?

  // Metadata
  ipAddress String?
  userAgent String?
  referrer  String?

  businessUnit BusinessUnit? @relation("ContactForms", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessUnitId, status])
  @@index([category, createdAt])
  @@map("contact_forms")
}

model Newsletter {
  id             String  @id @default(uuid())
  businessUnitId String?

  email     String
  firstName String?
  lastName  String?

  isActive       Boolean   @default(true)
  confirmedAt    DateTime?
  unsubscribedAt DateTime?

  // Preferences
  preferences Json? // Topics of interest

  businessUnit BusinessUnit? @relation("NewsletterSubscriptions", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessUnitId, email])
  @@index([isActive])
  @@map("newsletter_subscriptions")
}

// Add these enums to your existing enum section
enum OfferType {
  EARLY_BIRD
  LAST_MINUTE
  SEASONAL
  PACKAGE
  ROOM_UPGRADE
  DINING
  SPA
  ACTIVITY
  LOYALTY
  PROMO_CODE
}

enum OfferStatus {
  DRAFT
  ACTIVE
  EXPIRED
  PAUSED
  SCHEDULED
}

enum RestaurantType {
  FINE_DINING
  CASUAL_DINING
  CAFE
  BAR
  POOLSIDE
  ROOM_SERVICE
  BUFFET
  SPECIALTY
}

enum EventType {
  WEDDING
  CONFERENCE
  MEETING
  WORKSHOP
  CELEBRATION
  CULTURAL
  SEASONAL
  ENTERTAINMENT
  CORPORATE
  PRIVATE
}

enum EventStatus {
  PLANNING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

// =============================================================================
// SPECIAL OFFERS & PACKAGES
// =============================================================================

model SpecialOffer {
  id             String @id @default(uuid())
  businessUnitId String

  // Basic Information
  title       String
  slug        String
  subtitle    String?
  description String
  shortDesc   String? // For cards/listings

  type   OfferType
  status OfferStatus @default(DRAFT)

  // Visual Content
  featuredImage String?
  images        String[]
  videoUrl      String?

  // Pricing
  originalPrice  Decimal? @db.Decimal(10, 2)
  offerPrice     Decimal  @db.Decimal(10, 2)
  currency       String   @default("PHP")
  savingsAmount  Decimal? @db.Decimal(10, 2)
  savingsPercent Int?     @db.SmallInt // 0-100

  // Validity & Booking
  validFrom       DateTime
  validTo         DateTime
  bookingDeadline DateTime?

  // Stay Period Restrictions
  stayPeriodFrom DateTime?
  stayPeriodTo   DateTime?

  // Booking Restrictions
  minNights      Int  @default(1)
  maxNights      Int?
  minAdvanceBook Int? // days
  maxAdvanceBook Int? // days

  // Day of Week Availability
  monday    Boolean @default(true)
  tuesday   Boolean @default(true)
  wednesday Boolean @default(true)
  thursday  Boolean @default(true)
  friday    Boolean @default(true)
  saturday  Boolean @default(true)
  sunday    Boolean @default(true)

  // Capacity & Usage
  maxUses       Int? // Total times this offer can be used
  usesRemaining Int?
  maxPerGuest   Int  @default(1)

  // Promo Code
  promoCode    String? @unique
  requiresCode Boolean @default(false)

  // Package Inclusions (JSON array)
  inclusions      String[] // ["Free WiFi", "Breakfast", "Airport Transfer"]
  exclusions      String[] // What's not included
  termsConditions String?

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  // Publishing
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  // Featured & Sorting
  isFeatured Boolean @default(false)
  isPinned   Boolean @default(false)
  sortOrder  Int     @default(0)

  // Analytics
  viewCount    Int @default(0)
  clickCount   Int @default(0)
  bookingCount Int @default(0)

  businessUnit BusinessUnit @relation("BusinessUnitOffers", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  roomTypes OfferRoomType[]
  bookings  OfferBooking[]

  @@unique([businessUnitId, slug])
  @@index([businessUnitId, status, validFrom, validTo])
  @@index([type, isPublished, isFeatured])
  @@index([validFrom, validTo, isPublished])
  @@map("special_offers")
}

model OfferRoomType {
  offerId    String
  roomTypeId String

  offer    SpecialOffer   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  roomType RoomType_Model @relation("RoomTypeOffers", fields: [roomTypeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([offerId, roomTypeId])
  @@map("offer_room_types")
}

model OfferBooking {
  id            String @id @default(uuid())
  offerId       String
  reservationId String

  promoCode      String?
  discountAmount Decimal @db.Decimal(10, 2)

  offer       SpecialOffer @relation(fields: [offerId], references: [id])
  reservation Reservation  @relation("OfferReservations", fields: [reservationId], references: [id])

  createdAt DateTime @default(now())

  @@index([offerId])
  @@index([reservationId])
  @@map("offer_bookings")
}

// =============================================================================
// RESTAURANTS & DINING
// =============================================================================

model Restaurant {
  id             String @id @default(uuid())
  businessUnitId String

  // Basic Information
  name        String
  slug        String
  description String
  shortDesc   String? // For cards/listings

  type    RestaurantType
  cuisine String[] // ["Filipino", "International", "Asian"]

  // Location & Contact
  location String? // "Lobby Level", "Pool Deck"
  phone    String?
  email    String?

  // Capacity & Setup
  totalSeats     Int?
  privateRooms   Int     @default(0)
  outdoorSeating Boolean @default(false)
  airConditioned Boolean @default(true)

  // Operating Hours (JSON format for flexibility)
  operatingHours Json? // {"monday": {"open": "06:00", "close": "22:00", "closed": false}}

  // Features & Amenities
  features  String[] // ["Ocean View", "Live Music", "Private Dining"]
  dressCode String? // "Casual", "Smart Casual", "Formal"

  // Pricing
  priceRange  String? // "$", "$$", "$$$", "$$$$"
  averageMeal Decimal? @db.Decimal(8, 2)
  currency    String   @default("PHP")

  // Booking Settings
  acceptsReservations Boolean @default(true)
  advanceBookingDays  Int     @default(30)
  minPartySize        Int     @default(1)
  maxPartySize        Int?

  // Visual Content
  featuredImage  String?
  images         String[]
  virtualTourUrl String?

  // Menu
  hasMenu     Boolean   @default(true)
  menuUrl     String? // Link to PDF menu
  menuUpdated DateTime?

  // SEO & Publishing
  metaTitle       String?
  metaDescription String?

  isActive    Boolean   @default(true)
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  isFeatured Boolean @default(false)
  sortOrder  Int     @default(0)

  // Analytics
  viewCount Int @default(0)

  businessUnit BusinessUnit @relation("BusinessUnitRestaurants", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  menuCategories MenuCategory[]
  reservations   RestaurantReservation[]

  @@unique([businessUnitId, slug])
  @@index([businessUnitId, type, isActive])
  @@index([isPublished, isFeatured])
  @@map("restaurants")
}

model MenuCategory {
  id           String @id @default(uuid())
  restaurantId String

  name        String
  description String?
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  items MenuItem[]

  @@index([restaurantId, sortOrder])
  @@map("menu_categories")
}

model MenuItem {
  id         String @id @default(uuid())
  categoryId String

  name        String
  description String?
  price       Decimal @db.Decimal(8, 2)
  currency    String  @default("PHP")

  // Item Details
  allergens  String[] // ["Nuts", "Dairy", "Gluten"]
  dietary    String[] // ["Vegetarian", "Vegan", "Halal"]
  spiceLevel Int?     @db.SmallInt // 1-5

  // Availability
  isAvailable   Boolean @default(true)
  isSignature   Boolean @default(false) // Signature dish
  isRecommended Boolean @default(false)
  isNew         Boolean @default(false)

  // Visual
  image String?

  sortOrder Int @default(0)

  category MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId, sortOrder])
  @@index([isSignature, isRecommended])
  @@map("menu_items")
}

model RestaurantReservation {
  id           String  @id @default(uuid())
  restaurantId String
  guestId      String?

  // Guest Information (for walk-ins without guest record)
  guestName  String
  guestEmail String?
  guestPhone String?

  // Reservation Details
  reservationDate DateTime
  partySize       Int
  specialRequests String?

  // Status
  status      String    @default("confirmed") // "pending", "confirmed", "cancelled", "no_show", "completed"
  confirmedAt DateTime?
  cancelledAt DateTime?

  // Seating Preferences
  seatingArea String? // "Indoor", "Outdoor", "Private Room"
  tableNumber String?

  notes String?

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  guest      Guest?     @relation("GuestRestaurantReservations", fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([restaurantId, reservationDate])
  @@index([guestId])
  @@map("restaurant_reservations")
}

// =============================================================================
// EVENTS & ACTIVITIES
// =============================================================================

model Event {
  id             String @id @default(uuid())
  businessUnitId String

  // Basic Information
  title       String
  slug        String
  description String
  shortDesc   String? // For listings/cards

  type   EventType
  status EventStatus @default(PLANNING)

  // Categorization
  category String[] // ["Cultural", "Entertainment", "Seasonal"]
  tags     String[] // ["Family-friendly", "Adults-only", "Outdoor"]

  // Timing
  startDate DateTime
  endDate   DateTime
  startTime String? // "19:00"
  endTime   String? // "22:00"
  timezone  String   @default("Asia/Manila")

  isMultiDay     Boolean @default(false)
  isRecurring    Boolean @default(false)
  recurrenceRule String? // RRULE format for recurring events

  // Location
  venue         String
  venueDetails  String? // Specific location details
  venueCapacity Int?

  // Booking & Pricing
  isFree      Boolean  @default(true)
  ticketPrice Decimal? @db.Decimal(10, 2)
  currency    String   @default("PHP")

  requiresBooking  Boolean @default(false)
  maxAttendees     Int?
  currentAttendees Int     @default(0)
  waitlistEnabled  Boolean @default(false)

  // Booking Window
  bookingOpenDate  DateTime?
  bookingCloseDate DateTime?

  // Age & Restrictions
  minAge        Int? // Minimum age requirement
  maxAge        Int? // Maximum age (for kids events)
  isAdultsOnly  Boolean @default(false)
  isFamilyEvent Boolean @default(true)

  // Requirements
  requirements String[] // ["Swimwear", "Formal Attire", "ID Required"]
  includes     String[] // What's included in the event
  excludes     String[] // What's not included

  // Visual Content
  featuredImage String?
  images        String[]
  videoUrl      String?

  // Content
  fullDetails String? // Detailed description/itinerary
  highlights  String[] // Key highlights

  // Contact & Host
  hostName    String?
  hostBio     String?
  contactInfo String?

  // SEO & Publishing
  metaTitle       String?
  metaDescription String?

  isPublished Boolean   @default(false)
  publishedAt DateTime?

  isFeatured Boolean @default(false)
  isPinned   Boolean @default(false)
  sortOrder  Int     @default(0)

  // Analytics
  viewCount  Int @default(0)
  clickCount Int @default(0)

  businessUnit BusinessUnit @relation("BusinessUnitEvents", fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  bookings EventBooking[]

  @@unique([businessUnitId, slug])
  @@index([businessUnitId, type, status])
  @@index([startDate, endDate, isPublished])
  @@index([isFeatured, isPinned, sortOrder])
  @@map("events")
}

model EventBooking {
  id      String  @id @default(uuid())
  eventId String
  guestId String?

  // Guest Information (for non-registered guests)
  guestName  String
  guestEmail String
  guestPhone String?
  partySize  Int     @default(1)

  // Booking Details
  bookingRef String @unique
  status     String @default("confirmed") // "pending", "confirmed", "cancelled", "attended", "no_show"

  // Payment (if applicable)
  totalAmount   Decimal @default(0) @db.Decimal(10, 2)
  paymentStatus String  @default("n/a") // "pending", "paid", "refunded", "n/a"

  // Special Requirements
  specialRequests    String?
  dietaryRequests    String?
  accessibilityNeeds String?

  // Check-in
  checkedIn   Boolean   @default(false)
  checkedInAt DateTime?

  notes String?

  event Event  @relation(fields: [eventId], references: [id])
  guest Guest? @relation("GuestEventBookings", fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId, status])
  @@index([guestId])
  @@map("event_bookings")
}
